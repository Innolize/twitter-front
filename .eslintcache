[{"C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\reportWebVitals.ts":"1","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\App.tsx":"2","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\index.tsx":"3","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\componentes\\main\\General.tsx":"4","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\componentes\\leftSidebar\\Sidebar.tsx":"5","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\componentes\\main\\CrearComentario.tsx":"6","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\componentes\\main\\post\\Post.tsx":"7","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\componentes\\sign-in\\SignIn.tsx":"8","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\redux\\reducer\\index.ts":"9","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\redux\\store.ts":"10","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\componentes\\main\\index.tsx":"11","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\componentes\\sign-in\\CreateAccount.tsx":"12","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\redux\\reducer\\authReducer.ts":"13","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\redux\\types\\AuthActionTypes.ts":"14","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\redux\\actions\\logginAction.ts":"15","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\componentes\\leftSidebar\\ProfileButton.tsx":"16","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\screens\\MainPage.tsx":"17","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\screens\\CreateAccount.tsx":"18","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\screens\\LogIn.tsx":"19","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\common\\IAxios.ts":"20","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\api\\post\\getPosts.js":"21","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\hooks\\useFetch.tsx":"22","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\hooks\\useFetch.types.tsx":"23","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\api\\post\\createPost.ts":"24","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\componentes\\common\\Snackbar.tsx":"25","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\api\\post\\getPostById.tsx":"26","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\componentes\\main\\post\\DetailedPost.tsx":"27","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\types\\typeguards\\Post.typeguard.ts":"28","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\componentes\\main\\comment\\Comment.tsx":"29","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\types\\typeguards\\PostArray.typeguard.ts":"30","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\componentes\\main\\comment\\CommentContainer.tsx":"31","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\api\\comment\\createComment.ts":"32","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\api\\comment\\getComments.ts":"33","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\types\\typeguards\\CommentArray.typeguard.ts":"34","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\componentes\\common\\OptionsMenu.tsx":"35","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\componentes\\main\\comment\\CreateComment.tsx":"36","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\componentes\\profile\\ProfileImages.tsx":"37","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\componentes\\profile\\ProfileInfo.tsx":"38","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\api\\user\\getUser.ts":"39","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\screens\\ProfilePage.tsx":"40","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\componentes\\profile\\UserSpecificPosts.tsx":"41","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\api\\user\\getUserPosts.ts":"42","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\types\\typeguards\\User.typeguard.ts":"43","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\api\\post\\likePost.ts":"44","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\screens\\EditProfilePage.tsx":"45","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\componentes\\profile\\editProfile\\EditProfileButtons.tsx":"46","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\componentes\\profile\\editProfile\\EditProfileInfo.tsx":"47","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\api\\user\\updateUser.ts":"48","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\api\\websockets\\server.ts":"49","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\componentes\\main\\post\\PostContainer.tsx":"50","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\api\\user\\getUserLikeAvatars.ts":"51","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\componentes\\common\\EmojiButton.tsx":"52","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\api\\post\\deletePost.tsx":"53","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\api\\comment\\likeComment.ts":"54","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\api\\comment\\deleteComment.ts":"55"},{"size":425,"mtime":1607391992972,"results":"56","hashOfConfig":"57"},{"size":850,"mtime":1609430743027,"results":"58","hashOfConfig":"57"},{"size":615,"mtime":1611212758627,"results":"59","hashOfConfig":"57"},{"size":1219,"mtime":1611476090114,"results":"60","hashOfConfig":"57"},{"size":2654,"mtime":1611213942562,"results":"61","hashOfConfig":"57"},{"size":3473,"mtime":1611212843337,"results":"62","hashOfConfig":"57"},{"size":6087,"mtime":1611319967896,"results":"63","hashOfConfig":"57"},{"size":4952,"mtime":1608591437336,"results":"64","hashOfConfig":"57"},{"size":221,"mtime":1608168407696,"results":"65","hashOfConfig":"57"},{"size":356,"mtime":1608148566035,"results":"66","hashOfConfig":"57"},{"size":60,"mtime":1608501449392,"results":"67","hashOfConfig":"57"},{"size":6822,"mtime":1608589280131,"results":"68","hashOfConfig":"57"},{"size":1552,"mtime":1611577269432,"results":"69","hashOfConfig":"57"},{"size":931,"mtime":1611052941292,"results":"70","hashOfConfig":"57"},{"size":1888,"mtime":1611051426068,"results":"71","hashOfConfig":"57"},{"size":1924,"mtime":1608357337140,"results":"72","hashOfConfig":"57"},{"size":3170,"mtime":1611215797862,"results":"73","hashOfConfig":"57"},{"size":223,"mtime":1608501360588,"results":"74","hashOfConfig":"57"},{"size":178,"mtime":1608501242985,"results":"75","hashOfConfig":"57"},{"size":1398,"mtime":1611486465935,"results":"76","hashOfConfig":"57"},{"size":227,"mtime":1611490141909,"results":"77","hashOfConfig":"57"},{"size":1405,"mtime":1609666541508,"results":"78","hashOfConfig":"57"},{"size":642,"mtime":1609573532100,"results":"79","hashOfConfig":"57"},{"size":576,"mtime":1611202352179,"results":"80","hashOfConfig":"57"},{"size":876,"mtime":1610591355985,"results":"81","hashOfConfig":"57"},{"size":344,"mtime":1611395972957,"results":"82","hashOfConfig":"57"},{"size":2175,"mtime":1611474934495,"results":"83","hashOfConfig":"57"},{"size":144,"mtime":1611396250645,"results":"84","hashOfConfig":"57"},{"size":3643,"mtime":1611406124124,"results":"85","hashOfConfig":"57"},{"size":151,"mtime":1609502254043,"results":"86","hashOfConfig":"57"},{"size":2067,"mtime":1611471787466,"results":"87","hashOfConfig":"57"},{"size":558,"mtime":1609587279236,"results":"88","hashOfConfig":"57"},{"size":389,"mtime":1611395968766,"results":"89","hashOfConfig":"57"},{"size":208,"mtime":1611474218499,"results":"90","hashOfConfig":"57"},{"size":1350,"mtime":1611319943096,"results":"91","hashOfConfig":"57"},{"size":1389,"mtime":1611399547784,"results":"92","hashOfConfig":"57"},{"size":6106,"mtime":1611216864697,"results":"93","hashOfConfig":"57"},{"size":1268,"mtime":1610510058445,"results":"94","hashOfConfig":"57"},{"size":259,"mtime":1609666395835,"results":"95","hashOfConfig":"57"},{"size":2716,"mtime":1611219021601,"results":"96","hashOfConfig":"57"},{"size":892,"mtime":1609673529160,"results":"97","hashOfConfig":"57"},{"size":286,"mtime":1609673573562,"results":"98","hashOfConfig":"57"},{"size":174,"mtime":1609665969362,"results":"99","hashOfConfig":"57"},{"size":283,"mtime":1609853893357,"results":"100","hashOfConfig":"57"},{"size":5646,"mtime":1610580145748,"results":"101","hashOfConfig":"57"},{"size":2248,"mtime":1610499975166,"results":"102","hashOfConfig":"57"},{"size":1654,"mtime":1610499765944,"results":"103","hashOfConfig":"57"},{"size":599,"mtime":1610510666414,"results":"104","hashOfConfig":"57"},{"size":221,"mtime":1611492254556,"results":"105","hashOfConfig":"57"},{"size":1896,"mtime":1611476567418,"results":"106","hashOfConfig":"57"},{"size":573,"mtime":1610952974937,"results":"107","hashOfConfig":"57"},{"size":1763,"mtime":1611212555977,"results":"108","hashOfConfig":"57"},{"size":490,"mtime":1611321113270,"results":"109","hashOfConfig":"57"},{"size":295,"mtime":1611325155654,"results":"110","hashOfConfig":"57"},{"size":542,"mtime":1611321048941,"results":"111","hashOfConfig":"57"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},"12j0k8s",{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"118"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"124"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"128"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"128"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"135"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"124"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"144"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"118"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"118"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"128"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"118"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"118"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"128"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"184"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"184"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"195"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"124"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"128"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"128"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"135"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"118"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"118"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"118"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"135"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"124"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"128"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},"C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\reportWebVitals.ts",[],["259","260"],"C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\App.tsx",["261","262"],"import { Container, Grid } from '@material-ui/core';\nimport { Sidebar } from './componentes/leftSidebar/Sidebar';\nimport { BrowserRouter as Router, Redirect, Route } from 'react-router-dom'\nimport { MainPage } from './screens/MainPage';\nimport { LogIn } from './screens/LogIn';\nimport { CreateAccount } from './screens/CreateAccount';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Container >\n        <Router>\n          <Route path=\"/login\" exact>\n            <LogIn />\n          </Route>\n          <Route path=\"/create-account\" exact>\n            <CreateAccount />\n          </Route>\n          <Route path=\"/main\" >\n            <MainPage />\n          </Route>\n          <Route path=\"/\" exact>\n            <Redirect to=\"/main\"></Redirect>\n          </Route>\n        </Router>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n",["263","264"],"C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\index.tsx",[],"C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\componentes\\main\\General.tsx",["265","266","267","268","269","270"],"import Axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { RootState } from '../../redux/reducer'\r\nimport { CrearComentario } from './CrearComentario'\r\nimport { Post } from './post/Post'\r\nimport { useFetchReducer } from '../../hooks/useFetch'\r\nimport { getPosts } from '../../api/post/getPosts'\r\nimport { CircularProgress } from '@material-ui/core'\r\nimport { isPostArray } from '../../types/typeguards/PostArray.typeguard'\r\nimport { PostContainer } from './post/PostContainer'\r\nimport { getUserLikeAvatars } from '../../api/user/getUserLikeAvatars'\r\n\r\n\r\nexport const General: React.FC = () => {\r\n    const user = useSelector((state: RootState) => state.authReducer.user)\r\n    const { errorMessage, loading, successData } = useFetchReducer({ fetchCallback: getPosts })\r\n\r\n    if (loading) {\r\n        return <CircularProgress />\r\n    }\r\n\r\n    if (successData) {\r\n        const posts = successData\r\n        return (\r\n            <>\r\n                { user && <CrearComentario user={user} />}\r\n                { isPostArray(posts) && <PostContainer initialPosts={posts} ></PostContainer>}\r\n            </>\r\n        )\r\n    }\r\n\r\n    return null\r\n\r\n}\r\n\r\n",["271","272"],"C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\componentes\\leftSidebar\\Sidebar.tsx",["273"],"import React from 'react';\r\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport AccountBoxIcon from '@material-ui/icons/AccountBox';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport DraftsIcon from '@material-ui/icons/Drafts';\r\nimport { Grid, Typography } from '@material-ui/core';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../redux/reducer';\r\nimport { ProfileButton } from './ProfileButton';\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: '100%',\r\n            height: '100vh',\r\n            maxWidth: 360,\r\n            backgroundColor: theme.palette.background.paper,\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"space-between\"\r\n        }\r\n    }),\r\n);\r\n\r\nexport const Sidebar = (props: any) => {\r\n    const classes = useStyles();\r\n    const user = useSelector((state: RootState) => state.authReducer.user)\r\n\r\n    return (\r\n        <Grid item className={classes.root}>\r\n            <List component=\"nav\" aria-label=\"main mailbox folders\">\r\n                <ListItem button component={Link} to='/main' >\r\n                    <ListItemIcon>\r\n                        <HomeIcon></HomeIcon>\r\n                    </ListItemIcon>\r\n                    <ListItemText>\r\n                        <Typography variant=\"h6\">Home</Typography>\r\n                    </ListItemText>\r\n                </ListItem>\r\n                <ListItem button component={Link} to={`/main/profile/${user?._id}`} >\r\n                    <ListItemIcon>\r\n                        <AccountBoxIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText>\r\n                        <Typography variant=\"h6\">Profile</Typography>\r\n                    </ListItemText>\r\n                </ListItem>\r\n                <ListItem button component={Link} to='/notifications'>\r\n                    <ListItemIcon>\r\n                        <NotificationsIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText >\r\n                        <Typography variant=\"h6\">Notifications</Typography>\r\n                    </ListItemText>\r\n                </ListItem>\r\n            </List>\r\n            {user && <ProfileButton user={user} />}\r\n        </Grid>\r\n    );\r\n}\r\n",["274","275"],"C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\componentes\\main\\CrearComentario.tsx",["276","277","278","279"],"import { Avatar, Box, Button, createStyles, Input, makeStyles, Theme } from '@material-ui/core';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport React, { RefObject, useEffect, useRef, useState } from 'react'\r\nimport { User } from '../../types/User';\r\nimport { createPost } from '../../api/post/createPost';\r\nimport { PositionedSnackbar } from '../common/Snackbar'\r\nimport { Post } from '../../types/Post';\r\nimport { EmojiButton } from '../common/EmojiButton'\r\nimport { IEmojiData } from 'emoji-picker-react'\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        large: {\r\n            width: theme.spacing(7),\r\n            height: theme.spacing(7),\r\n            margin: \"20px 10px 20px 10px\"\r\n        },\r\n        textField: {\r\n            margin: \"10px 10px 10px 10px\",\r\n            width: \"90%\"\r\n        },\r\n        root: {\r\n            display: \"flex\",\r\n            padding: 10,\r\n            margin: 20,\r\n            border: \"solid #E1E8ED 1px\"\r\n        },\r\n        contenedorMultimedia: {\r\n            flexGrow: 1\r\n        },\r\n        contenedorBotones: {\r\n            display: \"flex\",\r\n            width: \"90%\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"flex-end\"\r\n        }\r\n    }),\r\n);\r\n\r\ninterface Props {\r\n    user: User\r\n}\r\n\r\nexport const CrearComentario: React.FC<Props> = ({ user }) => {\r\n    const [postContent, setPostContent] = useState(\"\")\r\n    const [error, setError] = useState<any>(null)\r\n    const [success, setSuccess] = useState<any>(null)\r\n    const classes = useStyles()\r\n\r\n    const inputOnChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setPostContent(e.target.value)\r\n    }\r\n\r\n    const sendNewPost = async () => {\r\n        const { success, response, error } = await createPost(postContent)\r\n        if (success) {\r\n            setSuccess(response)\r\n            setPostContent(\"\")\r\n        } else if (error) {\r\n            setError(error)\r\n        }\r\n    }\r\n\r\n    const handleEmojiClick = (e: React.MouseEvent<Element, MouseEvent>, data: IEmojiData) => {\r\n        setPostContent(c => c + data.emoji)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Box className={classes.root}>\r\n                <Avatar alt=\"carlitos test\" src={user.profilePicture || undefined} className={classes.large}></Avatar>\r\n                <Box style={{ width: \"90%\" }}>\r\n                    <Input autoFocus placeholder=\"Que querés compartir hoy?\" className={classes.textField} value={postContent} onChange={inputOnChange} />\r\n                    <Box className={classes.contenedorBotones} id=\"contenedor-botones\" >\r\n                        <EmojiButton onEmojiClick={handleEmojiClick}></EmojiButton>\r\n                        <Button\r\n                            size=\"small\"\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            endIcon={<SendIcon />}\r\n                            onClick={sendNewPost}\r\n                        >\r\n                            Enviar\r\n                    </Button>\r\n                    </Box>\r\n                </Box>\r\n            </Box>\r\n            {success && <PositionedSnackbar onCloseAction={() => setSuccess(false)} open={true} severity=\"success\" message=\"Posted successfuly!\"></PositionedSnackbar>}\r\n            {error && <PositionedSnackbar onCloseAction={() => setError(false)} open={true} severity=\"error\" message={error || \"error\"}></PositionedSnackbar>}\r\n        </>\r\n    );\r\n}","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\componentes\\main\\post\\Post.tsx",["280"],"import { Avatar, Box, Card, CardActions, CardContent, CardHeader, createStyles, Fade, IconButton, makeStyles, Theme, Typography } from '@material-ui/core';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport ShareIcon from '@material-ui/icons/Share';\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Post as IPost } from '../../../types/Post'\r\nimport moment from 'moment';\r\nimport { Link } from 'react-router-dom'\r\nimport { RootState } from '../../../redux/reducer';\r\nimport { useSelector } from 'react-redux';\r\nimport { likePost } from '../../../api/post/likePost';\r\nimport { getUserLikeAvatars, LilUser } from '../../../api/user/getUserLikeAvatars';\r\nimport { AvatarGroup } from '@material-ui/lab';\r\nimport { OptionMenuAction, OptionsMenu } from '../../common/OptionsMenu';\r\nimport { deletePost } from '../../../api/post/deletePost';\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            padding: 10,\r\n            margin: 20,\r\n            border: \"solid #E1E8ED 1px\",\r\n        },\r\n        paddingRemover: {\r\n            padding: 0\r\n        },\r\n        small: {\r\n            width: theme.spacing(3),\r\n            height: theme.spacing(3),\r\n            backgroundColor: \"gray\",\r\n            border: \"solid black 1px\"\r\n        },\r\n        large: {\r\n            width: theme.spacing(7),\r\n            height: theme.spacing(7),\r\n        },\r\n        cardAction: {\r\n            display: \"flex\",\r\n            justifyContent: \"space-around\"\r\n        },\r\n        title: {\r\n            color: \"inherit\",\r\n            textDecorationLine: \"none\",\r\n            textTransform: \"capitalize\"\r\n        }\r\n    })\r\n)\r\n\r\ninterface Props {\r\n    post: IPost\r\n    order?: number\r\n}\r\n\r\nexport const Post: React.FC<Props> = ({ post, order = 1 }) => {\r\n    const classes = useStyles()\r\n    const createdSince = moment(post.createdAt).fromNow()\r\n    const user = useSelector((state: RootState) => state.authReducer.user)\r\n    const postLiked = user && post.likesArr.includes(user._id)\r\n    const [currentLike, setCurrentLike] = useState<Boolean | null>(postLiked)\r\n    const [likeAvatars, setLikeAvatars] = useState<LilUser[]>([])\r\n    const ownPost = user?._id === post.author._id\r\n\r\n    const likeAction = async () => {\r\n        const response = await likePost(post._id)\r\n        setCurrentLike(response)\r\n    }\r\n\r\n    useEffect(() => {\r\n        const asyncFunction = async () => {\r\n            if (!!post.likesArr.length) {\r\n                const userArray = post.likesArr.slice(0, 4)\r\n                let userAvatarsResponse = await getUserLikeAvatars(userArray)\r\n                setLikeAvatars(userAvatarsResponse)\r\n            }\r\n        }\r\n        asyncFunction()\r\n\r\n    }, [])\r\n\r\n    const removePost = async (postId: string) => {\r\n        const result = await deletePost(postId)\r\n        if (result.success) {\r\n            console.log(result.message)\r\n        } else {\r\n            console.log(result.message)\r\n        }\r\n    }\r\n\r\n\r\n    const testAction: OptionMenuAction = {\r\n        description: \"Delete\",\r\n        action: () => removePost(post._id)\r\n    }\r\n\r\n    return (\r\n        <Fade in={true} style={{ transitionDelay: `${order * 300}ms` }}>\r\n            <div >\r\n                <Card className={classes.root} id=\"contenedor-post\" variant=\"outlined\">\r\n                    <CardHeader\r\n                        className={classes.paddingRemover}\r\n                        avatar={<Avatar src={post.author.profilePicture || undefined} className={classes.large} />}\r\n                        title={\r\n                            <Typography component={Link} variant=\"h5\" to={`/main/profile/${post.author._id}`} className={classes.title}>\r\n                                {post.author.name} {post.author.surname}\r\n                            </Typography>\r\n                        }\r\n                        subheader={createdSince}\r\n                        action={\r\n                            <OptionsMenu selfActions={ownPost ? [testAction] : null} />}\r\n                    />\r\n                    <CardContent>\r\n                        <Typography variant=\"body1\">\r\n                            {post.message}\r\n                        </Typography>\r\n                    </CardContent>\r\n                    <CardActions className={`${classes.cardAction} ${classes.paddingRemover}`}>\r\n\r\n                        <Box display=\"flex\" alignItems=\"center\">\r\n                            <IconButton onClick={likeAction}>\r\n                                {currentLike ?\r\n                                    <FavoriteIcon color=\"primary\" /> : <FavoriteBorderIcon color=\"inherit\" />}\r\n\r\n                            </IconButton>\r\n                            {(post.likesNumb || currentLike) && <Typography variant=\"h6\">{postLiked ? currentLike ? post.likesNumb : post.likesNumb - 1 : currentLike ? post.likesNumb + 1 : post.likesNumb}</Typography>}\r\n                            {!!likeAvatars && <AvatarGroup max={4} spacing=\"medium\">\r\n                                {likeAvatars.map((avatar, i) => <Avatar alt={avatar.name + \" \" + avatar.surname} src={avatar.profilePicture} className={classes.small} key={i}></Avatar>)}\r\n\r\n                            </AvatarGroup>}\r\n                            {likeAvatars.length > 4 && `+ ${likeAvatars.length - 4} persons `}\r\n                        </Box>\r\n                        <Box display=\"flex\" alignItems=\"center\">\r\n                            <IconButton component={Link} to={`/main/post/${post._id}`}>\r\n                                <ChatIcon />\r\n                            </IconButton>\r\n                            {(!!post.commentsNumb) && <Typography variant=\"h6\">{post.commentsNumb}</Typography>}\r\n                        </Box>\r\n                        <IconButton>\r\n                            <ShareIcon />\r\n                        </IconButton>\r\n                    </CardActions>\r\n\r\n                </Card>\r\n\r\n            </div>\r\n        </Fade>\r\n    );\r\n}",["281","282"],"C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\componentes\\sign-in\\SignIn.tsx",["283","284","285"],"import React, { useState } from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useForm } from 'react-hook-form'\r\nimport Axios from 'axios';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { login } from '../../redux/actions/logginAction'\r\nimport { Redirect } from 'react-router-dom';\r\nimport { InitialState } from '../../redux/reducer/authReducer';\r\nimport { RootState } from '../../redux/reducer';\r\n\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {'Copyright © '}\r\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n        Your Website\r\n      </Link>{' '}\r\n      {new Date().getFullYear()}\r\n      {'.'}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    height: '100vh',\r\n  },\r\n  image: {\r\n    backgroundImage: 'url(https://source.unsplash.com/random)',\r\n    backgroundRepeat: 'no-repeat',\r\n    backgroundColor:\r\n      theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\r\n    backgroundSize: 'cover',\r\n    backgroundPosition: 'center',\r\n  },\r\n  paper: {\r\n    margin: theme.spacing(8, 4),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nexport const SignInSide = () => {\r\n  const dispatch = useDispatch()\r\n  const auth = useSelector((state: RootState) => state.authReducer)\r\n  const classes = useStyles();\r\n  const { register, handleSubmit } = useForm()\r\n  const [logginError, setLogginError] = useState(\"\")\r\n\r\n  const onSubmit = async (data: any) => {\r\n    dispatch(login(data))\r\n  }\r\n\r\n  if (auth.user) {\r\n    return <Redirect to=\"/main\"></Redirect>\r\n  }\r\n\r\n  return (\r\n    <Grid container component=\"main\" className={classes.root}>\r\n      <CssBaseline />\r\n      <Grid item xs={false} sm={4} md={7} className={classes.image} />\r\n      <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\r\n        <div className={classes.paper}>\r\n          <Avatar className={classes.avatar}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Sign in\r\n          </Typography>\r\n          <form className={classes.form} noValidate onSubmit={handleSubmit(onSubmit)}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"email\"\r\n              label=\"Email Address\"\r\n              name=\"email\"\r\n              autoComplete=\"email\"\r\n              autoFocus\r\n              inputRef={register}\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              name=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              id=\"password\"\r\n              autoComplete=\"current-password\"\r\n              inputRef={register}\r\n            />\r\n            {logginError &&\r\n              <Typography variant=\"body2\" align=\"center\" color=\"secondary\">{logginError}</Typography>\r\n            }\r\n\r\n            <FormControlLabel\r\n              control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n              label=\"Remember me\"\r\n            />\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.submit}\r\n            >\r\n              Sign In\r\n            </Button>\r\n            <Grid container>\r\n              <Grid item xs>\r\n                <Link href=\"#\" variant=\"body2\">\r\n                  Forgot password?\r\n                </Link>\r\n              </Grid>\r\n              <Grid item>\r\n                <Link href=\"/create-account\" variant=\"body2\">\r\n                  {\"Don't have an account? Sign Up\"}\r\n                </Link>\r\n              </Grid>\r\n            </Grid>\r\n            <Box mt={5}>\r\n              <Copyright />\r\n            </Box>\r\n          </form>\r\n        </div>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\redux\\reducer\\index.ts",[],"C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\redux\\store.ts",["286"],"import { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport reducers from './reducer'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport reduxThunk from 'redux-thunk'\r\n\r\nconst middlewares = [\r\n    reduxThunk\r\n]\r\n\r\nexport const store = createStore(reducers,\r\n    composeWithDevTools(applyMiddleware(...middlewares))\r\n)",["287","288"],"C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\componentes\\main\\index.tsx",[],"C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\componentes\\sign-in\\CreateAccount.tsx",["289","290","291","292"],"import React, { useEffect, useState } from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport axios from 'axios'\r\n\r\nimport { useForm } from 'react-hook-form'\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { login } from '../../redux/actions/logginAction';\r\nimport { Redirect, useHistory } from 'react-router-dom';\r\nimport { RootState } from '../../redux/reducer';\r\n\r\nfunction Copyright() {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n            {'Copyright © '}\r\n            <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n                Your Website\r\n      </Link>{' '}\r\n            {new Date().getFullYear()}\r\n            {'.'}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\n\r\nexport const CreateAccount = () => {\r\n    const history = useHistory()\r\n    const dispatch = useDispatch()\r\n    const auth = useSelector((state: RootState) => state.authReducer)\r\n    const classes = useStyles();\r\n    const { register, handleSubmit } = useForm<FormData>()\r\n\r\n    const onSubmit = async (data: any) => {\r\n        dispatch(login(data, { new: true }))\r\n    }\r\n\r\n    useEffect(() => {\r\n        let listener = (e: KeyboardEvent) => {\r\n            if (e.key === \"Enter\") {\r\n                handleSubmit(onSubmit)\r\n            }\r\n        }\r\n\r\n        document.addEventListener(\"keydown\", listener)\r\n\r\n        return () => {\r\n            document.removeEventListener(\"keydown\", listener)\r\n        }\r\n    }, [])\r\n\r\n    if (auth.user) {\r\n        return <Redirect to=\"/main\"></Redirect>\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                    <LockOutlinedIcon />\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Sign up\r\n                </Typography>\r\n                <form className={classes.form} noValidate onSubmit={handleSubmit(onSubmit)}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField\r\n                                autoComplete=\"fname\"\r\n                                name=\"name\"\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"name\"\r\n                                label=\"First Name\"\r\n                                autoFocus\r\n                                inputRef={register}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"surname\"\r\n                                label=\"Last Name\"\r\n                                name=\"surname\"\r\n                                autoComplete=\"lname\"\r\n                                inputRef={register}\r\n\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"email\"\r\n                                label=\"Email Address\"\r\n                                name=\"email\"\r\n                                autoComplete=\"email\"\r\n                                inputRef={register}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                name=\"password\"\r\n                                label=\"Password\"\r\n                                type=\"password\"\r\n                                id=\"password\"\r\n                                autoComplete=\"current-password\"\r\n                                inputRef={register}\r\n                            />\r\n                        </Grid>\r\n                        <ul>\r\n                            {auth.errors && auth.errors.map((err, i) => <li key={i}>{err}</li>)}\r\n                        </ul>\r\n                        <Grid item xs={12}>\r\n                            <FormControlLabel\r\n                                control={<Checkbox value=\"allowExtraEmails\" color=\"primary\" />}\r\n                                label=\"I want to receive inspiration, marketing promotions and updates via email.\"\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                    >\r\n                        Sign Up\r\n          </Button>\r\n                    <Grid container justify=\"flex-end\">\r\n                        <Grid item>\r\n                            <Link href=\"/login\" variant=\"body2\">\r\n                                Already have an account? Sign in\r\n              </Link>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n            </div>\r\n            <Box mt={5}>\r\n                <Copyright />\r\n            </Box>\r\n        </Container>\r\n    );\r\n}","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\redux\\reducer\\authReducer.ts",[],"C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\redux\\types\\AuthActionTypes.ts",[],["293","294"],"C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\redux\\actions\\logginAction.ts",["295"],"import { Dispatch } from 'react'\r\nimport { User } from '../../types/User'\r\nimport { AuthActionTypes, LOGIN, LOADING, LOGIN_ERROR, loginPayload } from '../types/AuthActionTypes'\r\nimport { InitialState } from '../reducer/authReducer'\r\nimport { axiosI } from '../../common/IAxios'\r\n\r\ninterface logInfo {\r\n    email: string\r\n    password: string\r\n    name?: string\r\n    surname?: string\r\n}\r\n\r\ninterface NewAccount {\r\n    new: boolean\r\n}\r\n\r\nexport const login = (data: logInfo, newAccount?: NewAccount) => async (dispatch: Dispatch<AuthActionTypes>, getState: () => InitialState) => {\r\n    try {\r\n        dispatch({ type: LOADING })\r\n\r\n        if (newAccount) {\r\n            await axiosI.post('/user', data, { withCredentials: true })\r\n        }\r\n        const loggear = (await axiosI.post('/auth', data, { withCredentials: true })).data\r\n\r\n        dispatch({ type: LOGIN, payload: loggear })\r\n    } catch (error) {\r\n        if (error.response) {\r\n            let errors = error.response.data.message\r\n            dispatch({ type: LOGIN_ERROR, payload: { errors: errors } })\r\n        }\r\n    }\r\n}\r\n\r\ninterface RefreshReponse {\r\n    user: User,\r\n    message?: string,\r\n    access_token: string\r\n}\r\n\r\nexport const handleRefreshToken = () => async (dispatch: Dispatch<AuthActionTypes>) => {\r\n    console.log('entre al handleRefreshToken')\r\n    try {\r\n        dispatch({ type: LOADING })\r\n        const loggear: RefreshReponse = (await axiosI.post('/auth/refresh', { withCredentials: true })).data\r\n        if (loggear.access_token) {\r\n            dispatch({ type: LOGIN, payload: { user: loggear.user, access_token: loggear.access_token } })\r\n        } else {\r\n            dispatch({ type: LOGIN_ERROR, payload: { errors: [loggear.message ? loggear.message : 'loggin error'] } })\r\n        }\r\n    } catch (err) {\r\n        dispatch({ type: LOGIN_ERROR, payload: { errors: [\"error \"] } })\r\n    }\r\n\r\n}","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\componentes\\leftSidebar\\ProfileButton.tsx",["296"],"import { Avatar, Button, createStyles, List, ListItem, ListItemAvatar, ListItemText, makeStyles, Menu, MenuItem, Theme } from '@material-ui/core'\r\nimport React, { useRef, useState } from 'react'\r\nimport { User } from '../../types/User'\r\nimport { LOG_OUT, } from '../../redux/types/AuthActionTypes'\r\nimport { useDispatch } from 'react-redux'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        rounded: {\r\n            borderRadius: '25px'\r\n        }\r\n    })\r\n)\r\n\r\ninterface ProfileButtonProps {\r\n    user: User\r\n}\r\n\r\nexport const ProfileButton = ({ user }: ProfileButtonProps) => {\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles()\r\n    const buttonRef = useRef<HTMLDivElement>(null)\r\n    const [show, setShow] = useState<boolean>(false)\r\n    const logout = () => {\r\n        dispatch({ type: LOG_OUT })\r\n    }\r\n\r\n    return (\r\n        <List>\r\n            <ListItem button className={classes.rounded} ref={buttonRef} onClick={() => {setShow(true); console.log('no tengo que entrar aca')}}>\r\n                <ListItemAvatar>\r\n                    <Avatar src={user && user.profilePicture ? user.profilePicture : undefined}\r\n                        alt={user.name}\r\n                    ></Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText\r\n                    primary={\"\" + user.name + \" \" + user.surname}\r\n                >\r\n                </ListItemText>\r\n            </ListItem>\r\n            <Menu\r\n                id=\"fade-menu\"\r\n                anchorEl={buttonRef.current}\r\n                keepMounted\r\n                open={show}\r\n                onClose={() => setShow(false)}\r\n            >\r\n                <MenuItem onClick={logout}>Log out</MenuItem>\r\n                {/* <MenuItem onClick={handleClose}>My account</MenuItem>\r\n                <MenuItem onClick={handleClose}>Logout</MenuItem> */}\r\n            </Menu>\r\n        </List>\r\n    )\r\n\r\n}","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\screens\\MainPage.tsx",["297","298","299"],"import { Box, CircularProgress, createStyles, Grid, Hidden, makeStyles, Theme } from '@material-ui/core'\r\nimport { RootState } from '../redux/reducer'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Sidebar } from '../componentes/leftSidebar/Sidebar'\r\nimport { Redirect, Route } from 'react-router-dom'\r\nimport { General } from '../componentes/main'\r\nimport Axios from 'axios'\r\nimport { useEffect } from 'react'\r\nimport { handleRefreshToken } from '../redux/actions/logginAction'\r\nimport { DetailedPost } from '../componentes/main/post/DetailedPost'\r\nimport { ProfilePage } from './ProfilePage'\r\nimport { EditProfilePage } from './EditProfilePage'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        contenedorCentral: {\r\n            //chrome\r\n            '&::-webkit-scrollbar': {\r\n                width: \"6px\"\r\n            },\r\n            // \"&::-webkit-scrollbar-track\": {\r\n            //     background: \"light-blue\"\r\n            // },\r\n            '&::-webkit-scrollbar-thumb': {\r\n                backgroundColor: \"gray\",\r\n                borderRadius: \"20px\",\r\n                border: \"3px solid gray\"\r\n            },\r\n            height: \"100vh\",\r\n            overflowY: \"scroll\",\r\n            //microsoft\r\n            msOverflowStyle: \"none\",\r\n            //mozilla\r\n            scrollbarWidth: \"thin\",\r\n            scrollbarColor: \"gray transparent\",\r\n\r\n\r\n        },\r\n    })\r\n)\r\n\r\n\r\nexport const MainPage = () => {\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n    const { user, logged, loading } = useSelector((state: RootState) => state.authReducer)\r\n\r\n    useEffect(() => {\r\n        async function checkUser() {\r\n            if (logged === false) {\r\n                return\r\n            }\r\n            if (!user) {\r\n                dispatch(handleRefreshToken())\r\n            }\r\n        }\r\n        checkUser()\r\n    }, [user])\r\n\r\n\r\n    if (logged === false) {\r\n        return <Redirect to=\"/login\"></Redirect>\r\n    }\r\n\r\n\r\n    if (loading) {\r\n        return <CircularProgress></CircularProgress>\r\n    }\r\n\r\n    if (user) {\r\n        return (\r\n            // <Box display=\"flex\" justifyContent=\"center\" >\r\n            <Grid container justify=\"center\" >\r\n\r\n                <Grid item md={3}>\r\n                    <Hidden smDown>\r\n                        <Sidebar />\r\n                    </Hidden>\r\n                </Grid>\r\n                <Grid item xs={12} sm={8} md={6} lg={6} xl={6} className={classes.contenedorCentral}>\r\n                    <Route path=\"/main/post/:postId\" >\r\n                        <DetailedPost></DetailedPost>\r\n                    </Route>\r\n                    <Route path=\"/main/profile/:userId\" >\r\n                        <ProfilePage></ProfilePage>\r\n                    </Route>\r\n                    <Route path=\"/main/editProfile/:userId\">\r\n                        <EditProfilePage />\r\n                    </Route>\r\n                    <Route path=\"/main\" exact >\r\n                        <General />\r\n                    </Route>\r\n\r\n                </Grid>\r\n            </Grid>\r\n            // </Box>\r\n        )\r\n    }\r\n    else {\r\n        return null\r\n    }\r\n\r\n}\r\n","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\screens\\CreateAccount.tsx",[],"C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\screens\\LogIn.tsx",[],"C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\common\\IAxios.ts",["300"],"import axios from 'axios'\r\nimport { handleRefreshToken } from '../redux/actions/logginAction'\r\nimport { store } from '../redux/store'\r\nimport { User } from '../types/User'\r\n\r\nexport const axiosI = axios.create({\r\n    baseURL: process.env.REACT_APP_BACKEND_URL,\r\n    withCredentials: true\r\n})\r\n\r\naxiosI.interceptors.request.use(function (config) {\r\n    const token = store.getState().authReducer.token\r\n    const currentToken = config.headers.Authorization\r\n    if (token && (`Bearer ${token}` !== currentToken)) {\r\n        config.headers.Authorization = `Bearer ${token}`\r\n    }\r\n    return config\r\n})\r\n\r\ninterface RefreshReponse {\r\n    user: User,\r\n    message?: string,\r\n    access_token: string\r\n}\r\n\r\naxiosI.interceptors.response.use((response) => {\r\n    return response\r\n}, async function (err) {\r\n    const originalRequest = err.config;\r\n    if (err.response.status === 401 && !originalRequest._retry) {\r\n        console.log(\"estoy refresheando token\")\r\n        originalRequest._retry = true;\r\n        const refreshResponse: RefreshReponse = (await axiosI.post('/auth/refresh', { withCredentials: true })).data\r\n        store.dispatch({ type: \"REFRESH_TOKEN\", payload: refreshResponse.access_token })\r\n        originalRequest.headers.Authorization = `Bearer ${refreshResponse.access_token}`\r\n        return axiosI(originalRequest)\r\n    } else {\r\n        return Promise.reject(err)\r\n    }\r\n\r\n})","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\api\\post\\getPosts.js",[],["301","302"],"C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\hooks\\useFetch.tsx",["303","304"],"import { useEffect, useReducer } from \"react\"\r\nimport { Post } from \"../types/Post\"\r\nimport { ERROR, LOADING, SUCCESS, IinitialState, actions } from './useFetch.types'\r\n\r\nconst initialState = {\r\n    successData: [],\r\n    errorMessage: [],\r\n    loading: false\r\n}\r\n\r\nconst reducer = (state: IinitialState = initialState, action: actions): IinitialState => {\r\n    switch (action.type) {\r\n\r\n        case \"SUCCESS\":\r\n            return { ...state, loading: false, successData: action.payload }\r\n\r\n        case \"ERROR\":\r\n            return { ...state, loading: false, errorMessage: [action.payload] }\r\n\r\n        case \"LOADING\":\r\n            return { ...state, loading: true }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\ninterface Props {\r\n    fetchCallback: (options?: any) => Promise<any>,\r\n    fetchOptions?: any\r\n}\r\n\r\nexport const useFetchReducer = ({ fetchCallback, fetchOptions }: Props) => {\r\n    const [state, dispatch] = useReducer(reducer, initialState)\r\n\r\n    useEffect(() => {\r\n        const customFecth = async () => {\r\n            dispatch({ type: LOADING })\r\n            try {\r\n                const request = (await fetchCallback(fetchOptions))\r\n                dispatch({ type: SUCCESS, payload: request })\r\n            } catch (err) {\r\n                dispatch({ type: ERROR, payload: err })\r\n            }\r\n\r\n        }\r\n        customFecth()\r\n    }, [])\r\n\r\n    return state\r\n}","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\hooks\\useFetch.types.tsx",[],"C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\api\\post\\createPost.ts",[],"C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\componentes\\common\\Snackbar.tsx",["305","306"],"import Snackbar, { SnackbarOrigin } from '@material-ui/core/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/alert';\r\nimport { useState } from 'react';\r\n\r\n\r\nexport interface Props {\r\n    open: boolean;\r\n    severity: \"error\" | \"success\" | \"info\" | \"warning\",\r\n    message: string\r\n    onCloseAction: () => void\r\n}\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport const PositionedSnackbar: React.FC<Props> = ({ open, severity, message, onCloseAction }) => {\r\n\r\n    return (\r\n        <Snackbar\r\n            anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\r\n            autoHideDuration={4000}\r\n            open={open}\r\n            onClose={onCloseAction}\r\n        >\r\n            <Alert onClose={onCloseAction} severity={severity}>{message}</Alert>\r\n        </Snackbar>\r\n    )\r\n}",["307","308"],"C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\api\\post\\getPostById.tsx",[],"C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\componentes\\main\\post\\DetailedPost.tsx",["309"],"import React from 'react'\r\nimport { useParams } from 'react-router-dom';\r\nimport { getPostById } from '../../../api/post/getPostById';\r\nimport { useFetchReducer } from '../../../hooks/useFetch';\r\nimport { Post } from './Post'\r\nimport { Post as IPost } from '../../../types/Post';\r\nimport { isPost } from '../../../types/typeguards/Post.typeguard';\r\nimport { Box, CircularProgress } from '@material-ui/core';\r\nimport { CommentContainer } from '../comment/CommentContainer';\r\nimport { getComments } from '../../../api/comment/getComments';\r\nimport { isCommentArray } from '../../../types/typeguards/CommentArray.typeguard';\r\nimport { CreateComment } from '../comment/CreateComment';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../../redux/reducer';\r\n\r\ninterface IParams {\r\n    postId: string\r\n}\r\n\r\nexport const DetailedPost: React.FC = () => {\r\n    const { postId } = useParams<IParams>()\r\n    const user = useSelector((state: RootState) => state.authReducer.user)\r\n    const responsePost = useFetchReducer({ fetchCallback: getPostById, fetchOptions: { id: postId } })\r\n    const responseComments = useFetchReducer({ fetchCallback: getComments, fetchOptions: postId })\r\n\r\n    if (responsePost.successData && responseComments.successData) {\r\n        const post = responsePost.successData\r\n        const comments = responseComments.successData\r\n        return (\r\n            <Box>\r\n                {isPost(post) && <Post post={post} ></Post>}\r\n                {isPost(post) && <CommentContainer postId={post._id} postComments={isCommentArray(comments) ? comments : []} ></CommentContainer>}\r\n                {user && <CreateComment postId={postId} userId={user._id}></CreateComment>}\r\n            </Box>\r\n        )\r\n    }\r\n\r\n\r\n    if (responsePost.errorMessage || responseComments.errorMessage) {\r\n        return (\r\n            <>\r\n                <div>{responsePost.errorMessage}</div>\r\n                <div>{responseComments.errorMessage}</div>\r\n            </>\r\n        )\r\n    }\r\n\r\n    if (responsePost.loading || responseComments.loading) {\r\n        return <CircularProgress></CircularProgress>\r\n    }\r\n\r\n    return (\r\n        null\r\n    );\r\n}\r\n","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\types\\typeguards\\Post.typeguard.ts",[],"C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\componentes\\main\\comment\\Comment.tsx",["310","311","312","313","314"],"import { Avatar, Box, Card, CardContent, CardHeader, makeStyles, Typography, IconButton, createStyles, Theme } from '@material-ui/core'\r\nimport { ThumbUp } from '@material-ui/icons'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { deleteComment } from '../../../api/comment/deleteComment'\r\nimport { likeComment } from '../../../api/comment/likeComment'\r\nimport { createSocket } from '../../../api/websockets/server'\r\nimport { RootState } from '../../../redux/reducer'\r\nimport { IComment } from '../../../types/Comment'\r\nimport { OptionMenuAction, OptionsMenu } from '../../common/OptionsMenu'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            padding: 0,\r\n            margin: \"0px 20px\"\r\n        },\r\n        cardHeader: {\r\n            padding: 8\r\n        },\r\n        inputText: {\r\n            flexGrow: 1\r\n        },\r\n        centeredText: {\r\n            margin: 'auto 0px'\r\n        },\r\n        avatar: {\r\n            width: theme.spacing(3),\r\n            height: theme.spacing(3)\r\n        }\r\n    })\r\n)\r\n\r\ninterface Props {\r\n    comment: IComment\r\n}\r\n\r\nexport const Comment: React.FC<Props> = ({ comment }) => {\r\n    // const [currentComment, setCurrentComment] = useState<IComment>(comment)\r\n    const [showOptions, setShowOptions] = useState(false)\r\n    const user = useSelector((state: RootState) => state.authReducer.user)\r\n    const classes = useStyles()\r\n\r\n    const { name, profilePicture, surname, _id } = comment.author\r\n    const self = _id === user?._id\r\n    const commentLiked = user && comment.likesArr.includes(user._id)\r\n    console.log(commentLiked)\r\n    const removeComment = async (commentId: string) => {\r\n        const result = await deleteComment(commentId)\r\n        if (result.success) {\r\n            console.log(result.message)\r\n        } else {\r\n            console.log(result.message)\r\n        }\r\n    }\r\n\r\n    const removeCommentAction: OptionMenuAction = {\r\n        description: \"Delete\",\r\n        action: () => removeComment(comment._id)\r\n    }\r\n\r\n\r\n    const likeOnClick = async () => {\r\n        const response = await likeComment(comment._id)\r\n        console.log(response)\r\n    }\r\n\r\n    return (\r\n\r\n        <Card className={classes.root}\r\n            variant=\"outlined\"\r\n            // onMouseEnter={() => setShowOptions(true)}\r\n            // onMouseLeave={() => setShowOptions(false)}\r\n        >\r\n            <CardHeader\r\n                className={classes.cardHeader}\r\n                avatar={\r\n                    <Avatar aria-label=\"recipe\" src={profilePicture || undefined} className={classes.avatar} />\r\n\r\n                }\r\n                action={\r\n                    <OptionsMenu\r\n                        removeAction={() => console.log(\"reportado papu\")}\r\n                        selfActions={[removeCommentAction]}\r\n                    />}\r\n                title={<Typography variant=\"h6\">{`${name} ${surname}`}</Typography>}\r\n\r\n            />\r\n            <CardContent>\r\n                <Typography variant=\"body2\" >\r\n                    {comment.message}\r\n                </Typography>\r\n            </CardContent>\r\n            <Box display='flex' justifyContent='space-around'>\r\n                <IconButton onClick={likeOnClick} >\r\n\r\n                    <ThumbUp color={commentLiked ? 'primary' : 'inherit'} />\r\n                    {comment.likesNumb > 0 ? comment.likesNumb : null}\r\n                </IconButton>\r\n                <Typography className={classes.centeredText}>\r\n                    {/* {time} */}\r\n                </Typography>\r\n            </Box>\r\n        </Card>\r\n    )\r\n}\r\n",["315","316"],"C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\types\\typeguards\\PostArray.typeguard.ts",[],"C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\componentes\\main\\comment\\CommentContainer.tsx",["317","318"],"import { Box } from '@material-ui/core'\r\nimport React, { useCallback, useEffect, useState } from 'react'\r\nimport { Comment } from './Comment'\r\nimport { RootState } from '../../../redux/reducer'\r\nimport { useSelector } from 'react-redux'\r\nimport { IComment } from '../../../types/Comment'\r\nimport { createSocket } from '../../../api/websockets/server'\r\n\r\n\r\ninterface Props {\r\n    postId: string\r\n    postComments: IComment[]\r\n}\r\n\r\nexport const CommentContainer: React.FC<Props> = ({ postId, postComments }) => {\r\n    const user = useSelector((state: RootState) => state.authReducer.user)\r\n    const [comments, setComments] = useState<IComment[]>(postComments)\r\n\r\n    const handleUpdateComment = useCallback((comment: IComment) => {\r\n        const index = comments.findIndex(x => x._id === comment._id)\r\n        const newArray = comments\r\n        newArray[index] = comment\r\n        console.log(newArray)\r\n        setComments([...newArray])\r\n    }, [comments])\r\n\r\n    const handleRemoveComment = useCallback((commentId: string) => {\r\n        const index = comments.findIndex(x => x._id === commentId)\r\n        console.log(index)\r\n        const newArray = comments\r\n        newArray.splice(index, 1)\r\n        setComments([...newArray])\r\n    }, [comments])\r\n\r\n    useEffect(() => {\r\n        const socket = createSocket()\r\n        socket.emit('joinRoom', postId)\r\n        socket.on('updateComment', (data: IComment) => {\r\n            handleUpdateComment(data)\r\n        })\r\n        socket.on('removeComment', (data: IComment) => {\r\n            console.log('data: ', data)\r\n            handleRemoveComment(data._id)\r\n        })\r\n        socket.on('newComment', (newComment: IComment) => {\r\n            setComments(c => [...c, newComment])\r\n        })\r\n        return () => {\r\n            socket.removeAllListeners()\r\n            socket.disconnect()\r\n        }\r\n    }, [handleUpdateComment, handleUpdateComment, postId])\r\n\r\n    return (\r\n        <Box>\r\n            {comments && comments.map((el, idx) => <Comment comment={el} key={idx}></Comment>)}\r\n        </Box>\r\n    )\r\n}\r\n","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\api\\comment\\createComment.ts",[],"C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\api\\comment\\getComments.ts",[],"C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\types\\typeguards\\CommentArray.typeguard.ts",[],"C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\componentes\\common\\OptionsMenu.tsx",[],"C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\componentes\\main\\comment\\CreateComment.tsx",[],"C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\componentes\\profile\\ProfileImages.tsx",["319","320","321"],"import { Box, Button, Container, createStyles, IconButton, makeStyles, Theme } from '@material-ui/core'\r\nimport React, { useRef, useState } from 'react'\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport { User } from '../../types/User';\r\nimport { OptionsMenu, OptionMenuAction } from '../common/OptionsMenu';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        container: {\r\n            position: 'relative'\r\n        },\r\n        coverImageContainer: {\r\n            width: \"100%\",\r\n            minHeight: 200,\r\n            maxHeight: 450,\r\n            display: \"flex\",\r\n            justifyContent: \"center\"\r\n        },\r\n        coverImage: {\r\n            maxWidth: \"100%\",\r\n            objectFit: \"contain\",\r\n            maxHeight: 450,\r\n        },\r\n        editCoverImage: {\r\n            backgroundColor: \"black\",\r\n            opacity: \"0.5\",\r\n            position: 'absolute',\r\n            height: \"300px\",\r\n            width: \"100%\",\r\n            top: \"0px\",\r\n            // border: \"5px solid blue\",\r\n            visibility: \"hidden\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\"\r\n        },\r\n        userImageContainer: {\r\n            borderRadius: \"50%\",\r\n            position: \"absolute\",\r\n            left: \"30px\",\r\n            bottom: \"-90px\",\r\n            width: \"180px\",\r\n            height: \"180px\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            [theme.breakpoints.down('sm')]: {\r\n                width: \"120px\",\r\n                height: \"120px\",\r\n                left: \"30px\",\r\n                bottom: '-60px'\r\n            }\r\n\r\n        },\r\n        userImage: {\r\n            borderRadius: \"50%\",\r\n            objectFit: \"cover\",\r\n            width: \"180px\",\r\n            height: \"180px\",\r\n            border: \"5px solid white\",\r\n            backgroundColor: \"gray\",\r\n            [theme.breakpoints.down('sm')]: {\r\n                width: \"120px\",\r\n                height: \"120px\",\r\n            }\r\n        },\r\n        editUserImage: {\r\n            backgroundColor: \"black\",\r\n            opacity: \"0.5\",\r\n            position: 'absolute',\r\n            height: \"180px\",\r\n            width: \"180px\",\r\n            top: \"0px\",\r\n            borderRadius: \"50%\",\r\n            border: \"5px solid blue\",\r\n            visibility: \"hidden\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            [theme.breakpoints.down('sm')]: {\r\n                width: \"120px\",\r\n                height: \"120px\",\r\n                bottom: '-60px'\r\n            }\r\n        },\r\n        buttonHeigth: {\r\n            height: \"40px\"\r\n        },\r\n        buttonContainer: {\r\n            display: \"flex\",\r\n            justifyContent: \"flex-end\",\r\n            height: \"90px\"\r\n        },\r\n        visible: {\r\n            visibility: \"visible\"\r\n        }\r\n    })\r\n)\r\n\r\ninterface Props {\r\n    user: User\r\n    edit?: boolean\r\n    onClickCoverImage: () => void\r\n    onClickProfileImage: () => void\r\n}\r\n\r\nexport const ProfileImages: React.FC<Props> = ({ user, edit, onClickCoverImage, onClickProfileImage }) => {\r\n    const classes = useStyles()\r\n    const history = useHistory()\r\n    const [showEditAvatar, setShowEditAvatar] = useState<Boolean>(false)\r\n    const [showEditCover, setShowEditCover] = useState<Boolean>(false)\r\n    const coverRef = useRef<HTMLImageElement>(null)\r\n\r\n\r\n\r\n    const hoverEnter = (setter: React.Dispatch<React.SetStateAction<Boolean>>) => {\r\n        setter(true)\r\n    }\r\n\r\n    const hoverLeaves = (setter: React.Dispatch<React.SetStateAction<Boolean>>) => {\r\n        setter(false)\r\n    }\r\n\r\n    const editProfileMenu: OptionMenuAction[] = [\r\n        { description: \"Edit Profile\", action: () => history.push(`/main/editProfile/${user._id}`) }\r\n    ]\r\n\r\n    return (\r\n        <>\r\n            <Box className={classes.container} >\r\n                <div className={classes.coverImageContainer}>\r\n                    <img\r\n                        ref={coverRef}\r\n                        onMouseEnter={() => hoverEnter(setShowEditCover)}\r\n                        alt=\"user cover\" src={user.cover || \"https://picsum.photos/1000/500\"} className={classes.coverImage}\r\n                        onClick={onClickCoverImage}\r\n                    />\r\n                    <div\r\n                        style={{ height: coverRef.current?.height }}\r\n                        onMouseLeave={() => hoverLeaves(setShowEditCover)}\r\n                        onClick={onClickCoverImage}\r\n                        className={`${classes.editCoverImage} ${showEditCover ? classes.visible : \"\"}`}>\r\n                        {edit ? <EditIcon fontSize=\"large\" color=\"primary\"></EditIcon> : <SearchIcon fontSize=\"large\" color=\"primary\" ></SearchIcon>}\r\n                    </div>\r\n                </div>\r\n                <div className={classes.userImageContainer}>\r\n                    <img\r\n                        onMouseEnter={() => hoverEnter(setShowEditAvatar)}\r\n                        onClick={onClickProfileImage}\r\n                        alt=\"user profile image\" src={user.profilePicture || \"https://picsum.photos/180/180\"} className={classes.userImage}></img>\r\n                    <div\r\n                        onClick={onClickProfileImage}\r\n                        onMouseLeave={() => hoverLeaves(setShowEditAvatar)}\r\n                        className={`${classes.editUserImage} ${showEditAvatar ? classes.visible : \"\"}`}>\r\n                        {edit ? <EditIcon fontSize=\"large\" color=\"primary\"></EditIcon> : <SearchIcon fontSize=\"large\" color=\"primary\" ></SearchIcon>}\r\n                    </div>\r\n                </div>\r\n            </Box>\r\n            {!edit && <Box className={classes.buttonContainer}>\r\n                <OptionsMenu selfActions={editProfileMenu}></OptionsMenu>\r\n                <Button variant=\"outlined\" color=\"primary\" className={classes.buttonHeigth}> Follow</Button>\r\n            </Box>}\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\componentes\\profile\\ProfileInfo.tsx",[],["322","323"],"C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\api\\user\\getUser.ts",[],"C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\screens\\ProfilePage.tsx",["324"],"import { CircularProgress, createStyles, Fade, makeStyles, Modal, Theme } from '@material-ui/core'\r\nimport React, { useState } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { getUser } from '../api/user/getUser'\r\nimport { ProfileImages } from '../componentes/profile/ProfileImages'\r\nimport { ProfileInfo } from '../componentes/profile/ProfileInfo'\r\nimport { UserSpecificPosts } from '../componentes/profile/UserSpecificPosts'\r\nimport { useFetchReducer } from '../hooks/useFetch'\r\nimport { isUser } from '../types/typeguards/User.typeguard'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        modalRoot: {\r\n            backgroundColor: \"rgba(0,0,0,0.8)\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            position: \"absolute\",\r\n            top: 0,\r\n            left: 0,\r\n            right: 0,\r\n            bottom: 0,\r\n            margin: \"auto\",\r\n            maxHeight: \"80vh\",\r\n            color: \"white\",\r\n        }\r\n    })\r\n)\r\n\r\ninterface IParams {\r\n    userId: string\r\n}\r\n\r\nexport const ProfilePage: React.FC = () => {\r\n    const classes = useStyles()\r\n    const { userId } = useParams<IParams>()\r\n    const [openModal, setOpenModal] = useState<boolean>(false)\r\n\r\n    const [modalImage, setModalImage] = useState<string | null>('')\r\n\r\n    const { errorMessage, loading, successData } = useFetchReducer({ fetchCallback: getUser, fetchOptions: userId })\r\n\r\n    const handleImageClick = (imageUrl: string | null) => {\r\n        setModalImage(imageUrl)\r\n        setOpenModal(true);\r\n    }\r\n\r\n    if (isUser(successData)) {\r\n        return (\r\n            <>\r\n                <ProfileImages user={successData}\r\n                    onClickCoverImage={() => handleImageClick(successData.cover)}\r\n                    onClickProfileImage={() => handleImageClick(successData.profilePicture)}\r\n                />\r\n                <ProfileInfo user={successData} />\r\n                <UserSpecificPosts userId={userId}></UserSpecificPosts>\r\n                <Modal open={openModal} onClose={() => setOpenModal(false)}>\r\n                    <Fade in={openModal}>\r\n                        <div className={classes.modalRoot}>\r\n                            <img style={{ maxWidth: \"90%\", maxHeight:\"100%\" }} src={modalImage || \"https://www.thermaxglobal.com/wp-content/uploads/2020/05/image-not-found.jpg\"}></img>\r\n                        </div>\r\n                    </Fade>\r\n                </Modal>\r\n            </>\r\n        )\r\n    }\r\n\r\n    if (loading) {\r\n        return <CircularProgress></CircularProgress>\r\n    }\r\n\r\n    if (errorMessage) {\r\n        return <div>Hubo un error</div>\r\n    }\r\n\r\n    return null\r\n}\r\n\r\n","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\componentes\\profile\\UserSpecificPosts.tsx",["325"],"import { Box, CircularProgress } from '@material-ui/core'\r\nimport React from 'react'\r\nimport { getUserPosts } from '../../api/user/getUserPosts'\r\nimport { useFetchReducer } from '../../hooks/useFetch'\r\nimport { isPostArray } from '../../types/typeguards/PostArray.typeguard'\r\nimport { Post } from '../main/post/Post'\r\n\r\ninterface Props {\r\n    userId: string\r\n}\r\n\r\nexport const UserSpecificPosts: React.FC<Props> = ({ userId }) => {\r\n\r\n    const { errorMessage, loading, successData } = useFetchReducer({ fetchCallback: getUserPosts, fetchOptions: userId })\r\n    console.log(successData)\r\n    if (loading) {\r\n        return <CircularProgress></CircularProgress>\r\n    }\r\n\r\n    if (isPostArray(successData)) {\r\n        return (\r\n            <Box>\r\n                { successData.map((el, i) => <Post post={el} order={i} key={i} />)}\r\n\r\n            </Box>\r\n        )\r\n    }\r\n\r\n    return null\r\n}\r\n","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\api\\user\\getUserPosts.ts",[],"C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\types\\typeguards\\User.typeguard.ts",[],"C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\api\\post\\likePost.ts",[],"C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\screens\\EditProfilePage.tsx",["326","327","328","329","330","331","332"],"import { Box, createStyles, makeStyles, Theme } from '@material-ui/core'\r\nimport React, { MutableRefObject, useEffect, useRef, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Redirect, useHistory, useParams } from 'react-router-dom'\r\nimport { getUser } from '../api/user/getUser'\r\nimport { EditUser } from '../api/user/updateUser'\r\n\r\nimport { EditProfileInfo } from '../componentes/profile/editProfile/EditProfileInfo'\r\nimport { ProfileImages } from '../componentes/profile/ProfileImages'\r\nimport { useFetchReducer } from '../hooks/useFetch'\r\nimport { RootState } from '../redux/reducer'\r\nimport { isUser } from '../types/typeguards/User.typeguard'\r\nimport { EditProfileButtons } from '../componentes/profile/editProfile/EditProfileButtons'\r\nimport { updateUser } from '../api/user/updateUser'\r\nimport { USER_EDITED } from '../redux/types/AuthActionTypes'\r\n\r\n\r\n\r\ninterface IParams {\r\n    userId: string\r\n}\r\n\r\nexport const EditProfilePage: React.FC = () => {\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n    const { userId } = useParams<IParams>()\r\n\r\n    const user = useSelector((state: RootState) => state.authReducer.user)\r\n    console.log(\"redux user\", user)\r\n\r\n    //trae info de usuario de la base de datos y no del store por si el usuario cambio sus datos en otra pestaña\r\n\r\n    const { errorMessage, loading, successData } = useFetchReducer({ fetchCallback: getUser, fetchOptions: userId })\r\n\r\n    const [newCoverImage, setNewCoverImage] = useState<File | string>(\"\")\r\n    const [newProfileImage, setNewProfileImage] = useState<File | string>(\"\")\r\n    const [newBio, setNewBio] = useState<string>(\"\")\r\n    const [newName, setNewName] = useState<string>(\"\")\r\n    const [newSurname, setNewSurname] = useState<string>(\"\")\r\n\r\n    useEffect(() => {\r\n        if (isUser(successData)) {\r\n            setNewBio(successData.bio)\r\n            setNewName(successData.name)\r\n            setNewSurname(successData.surname)\r\n        }\r\n    }, [successData])\r\n\r\n    const coverImageRef = useRef() as MutableRefObject<HTMLInputElement>\r\n    const profileImageRef = useRef() as MutableRefObject<HTMLInputElement>\r\n\r\n\r\n    const removeCoverUpload = () => {\r\n        setNewCoverImage(\"\")\r\n        coverImageRef.current.value = \"\"\r\n    }\r\n\r\n    const removeProfileUpload = () => {\r\n        setNewProfileImage(\"\")\r\n        profileImageRef.current.value = \"\"\r\n    }\r\n\r\n    const onChangeBio = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setNewBio(e.target.value)\r\n    }\r\n\r\n    const onChangeCoverInput = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const files = e.target.files\r\n        if (files && files.length) {\r\n            setNewCoverImage(files[0])\r\n        }\r\n    }\r\n\r\n    const onChangeProfileInput = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const files = e.target.files\r\n        if (files && files.length) {\r\n            setNewProfileImage(files[0])\r\n        }\r\n    }\r\n\r\n    const saveUser = async () => {\r\n        const myFormData = new FormData()\r\n        myFormData.append('bio', newBio)\r\n        myFormData.append('name', newName)\r\n        myFormData.append('surname', newSurname)\r\n        if (newCoverImage) myFormData.append('cover', newCoverImage)\r\n        if (newProfileImage) myFormData.append('profile', newProfileImage)\r\n\r\n        const response = await updateUser(userId, myFormData)\r\n        dispatch({ type: USER_EDITED, payload: response })\r\n        console.log(response)\r\n        history.push(`/main/profile/${userId}`)\r\n    }\r\n\r\n    if (userId !== user?._id) {\r\n        return <Redirect to=\"/\"></Redirect>\r\n    }\r\n\r\n\r\n    if (isUser(successData)) {\r\n        return (\r\n            <>\r\n                <ProfileImages\r\n                    user={successData}\r\n                    edit={true}\r\n                    onClickCoverImage={() => coverImageRef.current.click()}\r\n                    onClickProfileImage={() => profileImageRef.current.click()}\r\n                />\r\n                <EditProfileButtons\r\n                    newCoverImage={!!newCoverImage}\r\n                    newProfileImage={!!newProfileImage}\r\n                    newCoverOnCancel={removeCoverUpload}\r\n                    newProfileOnCancel={removeProfileUpload}\r\n                    onClickCancel={\r\n                        () => history.push(`/main/profile/${userId}`)\r\n                    }\r\n                    onClickSave={saveUser}\r\n                />\r\n                <EditProfileInfo\r\n                    name={newName}\r\n                    surname={newSurname}\r\n                    bio={newBio}\r\n                    nameOnChange={(e) => setNewName(e.target.value)}\r\n                    surnameOnChange={(e) => setNewSurname(e.target.value)}\r\n                    onChangeBio={onChangeBio}\r\n                />\r\n                <HiddenInput\r\n                    customRef={coverImageRef}\r\n                    inputOnChange={onChangeCoverInput}\r\n                    id=\"cover-image\"\r\n                />\r\n                <HiddenInput\r\n                    customRef={profileImageRef}\r\n                    inputOnChange={onChangeProfileInput}\r\n                    id=\"profile-image\"\r\n                />\r\n            </>\r\n        )\r\n    }\r\n\r\n    return null\r\n}\r\n\r\ninterface HiddenInputProps {\r\n    customRef: React.RefObject<HTMLInputElement>\r\n    inputOnChange: (e: React.ChangeEvent<HTMLInputElement>) => void\r\n    id: string\r\n}\r\n\r\nconst HiddenInput: React.FC<HiddenInputProps> = ({ customRef, inputOnChange, id }) => {\r\n    return (\r\n        <input type=\"file\" style={{ display: 'none' }} id={id} ref={customRef} onChange={inputOnChange}></input>\r\n    )\r\n}","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\componentes\\profile\\editProfile\\EditProfileButtons.tsx",["333","334","335"],"import React, { useState } from 'react'\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport NewReleasesIcon from '@material-ui/icons/NewReleases';\r\nimport { Box, Button, Chip, createStyles, IconButton, makeStyles, Theme } from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        buttonContainer: {\r\n            display: \"flex\",\r\n            justifyContent: \"flex-end\",\r\n        },\r\n        root: {\r\n            height: 90,\r\n            padding: 10\r\n        },\r\n        margin: {\r\n            margin: 5\r\n        }\r\n    })\r\n)\r\n\r\ninterface EditProfileButtonsProps {\r\n    newProfileImage: boolean\r\n    newCoverImage: boolean\r\n    newProfileOnCancel: () => void\r\n    newCoverOnCancel: () => void\r\n    onClickCancel: () => void\r\n    onClickSave: () => void\r\n}\r\n\r\nexport const EditProfileButtons: React.FC<EditProfileButtonsProps> = ({ newCoverImage, newProfileImage, newProfileOnCancel, newCoverOnCancel, onClickCancel, onClickSave }) => {\r\n    const classes = useStyles()\r\n    return (\r\n        <Box className={classes.root}>\r\n            <Box className={classes.buttonContainer}>\r\n                <Button variant=\"outlined\" color=\"secondary\" className={classes.margin} onClick={onClickCancel}>\r\n                    Cancel<CancelIcon color=\"secondary\" />\r\n                </Button>\r\n                <Button variant=\"outlined\" color=\"primary\" className={classes.margin} onClick={onClickSave}>\r\n                    Save<SaveIcon color=\"primary\" />\r\n                </Button>\r\n            </Box>\r\n            <Box className={classes.buttonContainer}>\r\n                {newProfileImage && <Chip\r\n                    color=\"primary\"\r\n                    label='new profile image!'\r\n                    icon={<NewReleasesIcon />}\r\n                    onDelete={newProfileOnCancel}\r\n                />}\r\n                {newCoverImage && <Chip\r\n                    color=\"primary\"\r\n                    label='new cover Image!'\r\n                    icon={<NewReleasesIcon />}\r\n                    onDelete={newCoverOnCancel}\r\n                />}\r\n\r\n            </Box >\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\n","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\componentes\\profile\\editProfile\\EditProfileInfo.tsx",["336","337","338","339"],"import { Box, createStyles, makeStyles, TextField, Theme, Typography } from '@material-ui/core'\r\nimport CalendarTodayOutlinedIcon from '@material-ui/icons/CalendarTodayOutlined';\r\nimport React, { useState } from 'react'\r\nimport { User } from '../../../types/User'\r\nimport moment from 'moment'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        container: {\r\n            '& *': {\r\n                padding: \"5px\"\r\n            },\r\n        },\r\n        header: {\r\n            textTransform: \"capitalize\",\r\n        }\r\n    })\r\n)\r\n\r\ninterface Props {\r\n    bio: string\r\n    name: string\r\n    surname: string\r\n    nameOnChange: (e: React.ChangeEvent<HTMLInputElement>) => void\r\n    surnameOnChange: (e: React.ChangeEvent<HTMLInputElement>) => void\r\n    onChangeBio: (e: React.ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nexport const EditProfileInfo: React.FC<Props> = ({ name, surname, bio, onChangeBio, nameOnChange, surnameOnChange }) => {\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <Box display=\"flex\" flexDirection=\"column\" className={classes.container}>\r\n            <Typography variant=\"h5\" className={classes.header}>{name} {surname}</Typography>\r\n            <TextField variant=\"outlined\" value={name} onChange={nameOnChange} label=\"name\"></TextField>\r\n            <TextField variant=\"outlined\" value={surname} onChange={surnameOnChange} label=\"surname\"></TextField>\r\n            <TextField\r\n                label=\"bio\"\r\n                variant=\"outlined\"\r\n                value={bio || \"\"}\r\n                onChange={onChangeBio}\r\n                multiline\r\n            ></TextField>\r\n        </Box>\r\n    )\r\n}\r\n","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\api\\user\\updateUser.ts",[],"C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\api\\websockets\\server.ts",["340"],"import io from 'socket.io-client'\r\n\r\nexport const createSocket = () => {\r\n    const URL = process.env.REACT_APP_BACKEND_URL as string\r\n    return io(\"http://localhost:4001\", { 'transports': ['websocket'] })\r\n    //  \r\n}\r\n","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\componentes\\main\\post\\PostContainer.tsx",["341"],"import { Box, createStyles, makeStyles, Theme } from '@material-ui/core'\r\nimport React, { useCallback, useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { createSocket } from '../../../api/websockets/server'\r\nimport { RootState } from '../../../redux/reducer'\r\nimport { Post as IPost } from '../../../types/Post'\r\nimport { Post } from './Post'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            // display: \"flex\",\r\n            // flexDirection: \"row\",\r\n            [theme.breakpoints.down('sm')]: {\r\n                width: \"100%\"\r\n            }\r\n        }\r\n    })\r\n)\r\n\r\ninterface Props {\r\n    initialPosts: IPost[]\r\n}\r\n\r\nexport const PostContainer: React.FC<Props> = ({ initialPosts }) => {\r\n\r\n    const classes = useStyles()\r\n    const user = useSelector((store: RootState) => store.authReducer.user)\r\n    const [posts, setPosts] = useState<IPost[]>(initialPosts)\r\n    // const [newPosts, setNewPosts] = useState<IPost[]>([])\r\n\r\n    const removePostHandler = useCallback((data: IPost) => {\r\n        const myNewPosts = posts\r\n        const index = myNewPosts.findIndex(curr => curr._id === data._id)\r\n        myNewPosts.splice(index, 1)\r\n        setPosts([...myNewPosts])\r\n    }, [posts])\r\n\r\n    useEffect(() => {\r\n        const socket = createSocket()\r\n        socket.emit(\"joinRoom\", \"general\")\r\n        socket.on(\"newPost\", (data: IPost) => {\r\n\r\n            setPosts(c => [data, ...c])\r\n        })\r\n        socket.on(\"removePost\", (newPost: IPost) => {\r\n            removePostHandler(newPost)\r\n        })\r\n        return () => {\r\n            socket.removeAllListeners()\r\n            socket.disconnect()\r\n        }\r\n    }, [removePostHandler])\r\n\r\n    return (\r\n        <Box className={classes.root}>\r\n            {posts.map((el, i) => <Post post={el} order={i} key={el._id} />)}\r\n        </Box>\r\n\r\n    )\r\n}\r\n","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\api\\user\\getUserLikeAvatars.ts",[],"C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\componentes\\common\\EmojiButton.tsx",["342"],"import { Button, Popover } from '@material-ui/core'\r\nimport React, { MutableRefObject, RefObject, useRef, useState } from 'react'\r\nimport Picker, { IEmojiData } from 'emoji-picker-react'\r\n\r\n\r\ninterface Props {\r\n    onEmojiClick: (e: React.MouseEvent<Element, MouseEvent>, data: IEmojiData) => void\r\n}\r\n\r\nexport const EmojiButton: React.FC<Props> = ({ onEmojiClick }) => {\r\n    const buttonRef = useRef<HTMLButtonElement | null>(null)\r\n    const [showEmojis, setShowEmojis] = useState<boolean>(false)\r\n\r\n\r\n    const handleClose = () => {\r\n        setShowEmojis(false);\r\n    };\r\n\r\n    const handleOpen = () => {\r\n        setShowEmojis(true)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Button ref={buttonRef} onClick={handleOpen}>😀</Button>\r\n            <EmojiPopover anchorEl={buttonRef} isOpen={showEmojis} onClose={handleClose} onEmojiClick={onEmojiClick} ></EmojiPopover>\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface EmojiPopoverProps {\r\n    anchorEl: MutableRefObject<HTMLButtonElement | null>,\r\n    isOpen: boolean,\r\n    onClose: () => void,\r\n    onEmojiClick: (e: React.MouseEvent<Element, MouseEvent>, data: IEmojiData) => void\r\n}\r\n\r\nconst EmojiPopover: React.FC<EmojiPopoverProps> = ({ anchorEl, onClose, isOpen, onEmojiClick }) => {\r\n\r\n    return (\r\n\r\n        <Popover\r\n            open={isOpen}\r\n            anchorEl={anchorEl.current}\r\n            onClose={onClose}\r\n            anchorOrigin={{\r\n                vertical: 'bottom',\r\n                horizontal: 'center',\r\n            }}\r\n            transformOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'center',\r\n            }}\r\n        >\r\n            <Picker disableSearchBar disableSkinTonePicker onEmojiClick={onEmojiClick}></Picker>\r\n\r\n        </Popover>\r\n    );\r\n}","C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\api\\post\\deletePost.tsx",[],"C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\api\\comment\\likeComment.ts",[],"C:\\Users\\Kuppa\\Documents\\React\\twitter-front\\src\\api\\comment\\deleteComment.ts",[],{"ruleId":"343","replacedBy":"344"},{"ruleId":"345","replacedBy":"346"},{"ruleId":"347","severity":1,"message":"348","line":1,"column":21,"nodeType":"349","messageId":"350","endLine":1,"endColumn":25},{"ruleId":"347","severity":1,"message":"351","line":2,"column":10,"nodeType":"349","messageId":"350","endLine":2,"endColumn":17},{"ruleId":"343","replacedBy":"352"},{"ruleId":"345","replacedBy":"353"},{"ruleId":"347","severity":1,"message":"354","line":1,"column":8,"nodeType":"349","messageId":"350","endLine":1,"endColumn":13},{"ruleId":"347","severity":1,"message":"355","line":2,"column":17,"nodeType":"349","messageId":"350","endLine":2,"endColumn":26},{"ruleId":"347","severity":1,"message":"356","line":2,"column":28,"nodeType":"349","messageId":"350","endLine":2,"endColumn":36},{"ruleId":"347","severity":1,"message":"357","line":6,"column":10,"nodeType":"349","messageId":"350","endLine":6,"endColumn":14},{"ruleId":"347","severity":1,"message":"358","line":12,"column":10,"nodeType":"349","messageId":"350","endLine":12,"endColumn":28},{"ruleId":"347","severity":1,"message":"359","line":17,"column":13,"nodeType":"349","messageId":"350","endLine":17,"endColumn":25},{"ruleId":"343","replacedBy":"360"},{"ruleId":"345","replacedBy":"361"},{"ruleId":"347","severity":1,"message":"362","line":10,"column":8,"nodeType":"349","messageId":"350","endLine":10,"endColumn":18},{"ruleId":"343","replacedBy":"363"},{"ruleId":"345","replacedBy":"364"},{"ruleId":"347","severity":1,"message":"365","line":3,"column":17,"nodeType":"349","messageId":"350","endLine":3,"endColumn":26},{"ruleId":"347","severity":1,"message":"355","line":3,"column":28,"nodeType":"349","messageId":"350","endLine":3,"endColumn":37},{"ruleId":"347","severity":1,"message":"366","line":3,"column":39,"nodeType":"349","messageId":"350","endLine":3,"endColumn":45},{"ruleId":"347","severity":1,"message":"357","line":7,"column":10,"nodeType":"349","messageId":"350","endLine":7,"endColumn":14},{"ruleId":"367","severity":1,"message":"368","line":80,"column":8,"nodeType":"369","endLine":80,"endColumn":10,"suggestions":"370"},{"ruleId":"343","replacedBy":"371"},{"ruleId":"345","replacedBy":"372"},{"ruleId":"347","severity":1,"message":"354","line":16,"column":8,"nodeType":"349","messageId":"350","endLine":16,"endColumn":13},{"ruleId":"347","severity":1,"message":"373","line":20,"column":10,"nodeType":"349","messageId":"350","endLine":20,"endColumn":22},{"ruleId":"347","severity":1,"message":"374","line":72,"column":23,"nodeType":"349","messageId":"350","endLine":72,"endColumn":37},{"ruleId":"347","severity":1,"message":"375","line":1,"column":27,"nodeType":"349","messageId":"350","endLine":1,"endColumn":42},{"ruleId":"343","replacedBy":"376"},{"ruleId":"345","replacedBy":"377"},{"ruleId":"347","severity":1,"message":"356","line":1,"column":28,"nodeType":"349","messageId":"350","endLine":1,"endColumn":36},{"ruleId":"347","severity":1,"message":"378","line":15,"column":8,"nodeType":"349","messageId":"350","endLine":15,"endColumn":13},{"ruleId":"347","severity":1,"message":"379","line":59,"column":11,"nodeType":"349","messageId":"350","endLine":59,"endColumn":18},{"ruleId":"367","severity":1,"message":"380","line":81,"column":8,"nodeType":"369","endLine":81,"endColumn":10,"suggestions":"381"},{"ruleId":"343","replacedBy":"382"},{"ruleId":"345","replacedBy":"383"},{"ruleId":"347","severity":1,"message":"384","line":3,"column":56,"nodeType":"349","messageId":"350","endLine":3,"endColumn":68},{"ruleId":"347","severity":1,"message":"385","line":1,"column":18,"nodeType":"349","messageId":"350","endLine":1,"endColumn":24},{"ruleId":"347","severity":1,"message":"386","line":1,"column":10,"nodeType":"349","messageId":"350","endLine":1,"endColumn":13},{"ruleId":"347","severity":1,"message":"354","line":7,"column":8,"nodeType":"349","messageId":"350","endLine":7,"endColumn":13},{"ruleId":"367","severity":1,"message":"387","line":58,"column":8,"nodeType":"369","endLine":58,"endColumn":14,"suggestions":"388"},{"ruleId":"347","severity":1,"message":"389","line":2,"column":10,"nodeType":"349","messageId":"350","endLine":2,"endColumn":28},{"ruleId":"343","replacedBy":"352"},{"ruleId":"345","replacedBy":"353"},{"ruleId":"347","severity":1,"message":"357","line":2,"column":10,"nodeType":"349","messageId":"350","endLine":2,"endColumn":14},{"ruleId":"367","severity":1,"message":"390","line":49,"column":8,"nodeType":"369","endLine":49,"endColumn":10,"suggestions":"391"},{"ruleId":"347","severity":1,"message":"392","line":1,"column":20,"nodeType":"349","messageId":"350","endLine":1,"endColumn":34},{"ruleId":"347","severity":1,"message":"356","line":3,"column":10,"nodeType":"349","messageId":"350","endLine":3,"endColumn":18},{"ruleId":"343","replacedBy":"393"},{"ruleId":"345","replacedBy":"394"},{"ruleId":"347","severity":1,"message":"395","line":6,"column":18,"nodeType":"349","messageId":"350","endLine":6,"endColumn":23},{"ruleId":"347","severity":1,"message":"355","line":3,"column":17,"nodeType":"349","messageId":"350","endLine":3,"endColumn":26},{"ruleId":"347","severity":1,"message":"396","line":7,"column":10,"nodeType":"349","messageId":"350","endLine":7,"endColumn":22},{"ruleId":"347","severity":1,"message":"397","line":40,"column":12,"nodeType":"349","messageId":"350","endLine":40,"endColumn":23},{"ruleId":"347","severity":1,"message":"398","line":40,"column":25,"nodeType":"349","messageId":"350","endLine":40,"endColumn":39},{"ruleId":"347","severity":1,"message":"399","line":45,"column":11,"nodeType":"349","messageId":"350","endLine":45,"endColumn":15},{"ruleId":"343","replacedBy":"400"},{"ruleId":"345","replacedBy":"401"},{"ruleId":"347","severity":1,"message":"402","line":16,"column":11,"nodeType":"349","messageId":"350","endLine":16,"endColumn":15},{"ruleId":"367","severity":1,"message":"403","line":52,"column":8,"nodeType":"369","endLine":52,"endColumn":58,"suggestions":"404"},{"ruleId":"347","severity":1,"message":"405","line":1,"column":23,"nodeType":"349","messageId":"350","endLine":1,"endColumn":32},{"ruleId":"347","severity":1,"message":"406","line":1,"column":48,"nodeType":"349","messageId":"350","endLine":1,"endColumn":58},{"ruleId":"407","severity":1,"message":"408","line":149,"column":21,"nodeType":"409","endLine":152,"endColumn":141},{"ruleId":"343","replacedBy":"410"},{"ruleId":"345","replacedBy":"411"},{"ruleId":"412","severity":1,"message":"413","line":60,"column":29,"nodeType":"409","endLine":60,"endColumn":179},{"ruleId":"347","severity":1,"message":"359","line":14,"column":13,"nodeType":"349","messageId":"350","endLine":14,"endColumn":25},{"ruleId":"347","severity":1,"message":"386","line":1,"column":10,"nodeType":"349","messageId":"350","endLine":1,"endColumn":13},{"ruleId":"347","severity":1,"message":"414","line":1,"column":15,"nodeType":"349","messageId":"350","endLine":1,"endColumn":27},{"ruleId":"347","severity":1,"message":"415","line":1,"column":29,"nodeType":"349","messageId":"350","endLine":1,"endColumn":39},{"ruleId":"347","severity":1,"message":"416","line":1,"column":41,"nodeType":"349","messageId":"350","endLine":1,"endColumn":46},{"ruleId":"347","severity":1,"message":"417","line":6,"column":10,"nodeType":"349","messageId":"350","endLine":6,"endColumn":18},{"ruleId":"347","severity":1,"message":"359","line":33,"column":13,"nodeType":"349","messageId":"350","endLine":33,"endColumn":25},{"ruleId":"347","severity":1,"message":"418","line":33,"column":27,"nodeType":"349","messageId":"350","endLine":33,"endColumn":34},{"ruleId":"347","severity":1,"message":"356","line":1,"column":17,"nodeType":"349","messageId":"350","endLine":1,"endColumn":25},{"ruleId":"347","severity":1,"message":"406","line":5,"column":43,"nodeType":"349","messageId":"350","endLine":5,"endColumn":53},{"ruleId":"347","severity":1,"message":"419","line":6,"column":8,"nodeType":"349","messageId":"350","endLine":6,"endColumn":18},{"ruleId":"347","severity":1,"message":"420","line":2,"column":8,"nodeType":"349","messageId":"350","endLine":2,"endColumn":33},{"ruleId":"347","severity":1,"message":"356","line":3,"column":17,"nodeType":"349","messageId":"350","endLine":3,"endColumn":25},{"ruleId":"347","severity":1,"message":"421","line":4,"column":10,"nodeType":"349","messageId":"350","endLine":4,"endColumn":14},{"ruleId":"347","severity":1,"message":"422","line":5,"column":8,"nodeType":"349","messageId":"350","endLine":5,"endColumn":14},{"ruleId":"347","severity":1,"message":"423","line":4,"column":11,"nodeType":"349","messageId":"350","endLine":4,"endColumn":14},{"ruleId":"347","severity":1,"message":"402","line":28,"column":11,"nodeType":"349","messageId":"350","endLine":28,"endColumn":15},{"ruleId":"347","severity":1,"message":"365","line":2,"column":35,"nodeType":"349","messageId":"350","endLine":2,"endColumn":44},"no-native-reassign",["424"],"no-negated-in-lhs",["425"],"@typescript-eslint/no-unused-vars","'Grid' is defined but never used.","Identifier","unusedVar","'Sidebar' is defined but never used.",["424"],["425"],"'Axios' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'Post' is defined but never used.","'getUserLikeAvatars' is defined but never used.","'errorMessage' is assigned a value but never used.",["424"],["425"],"'DraftsIcon' is defined but never used.",["424"],["425"],"'RefObject' is defined but never used.","'useRef' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'post.likesArr'. Either include it or remove the dependency array.","ArrayExpression",["426"],["424"],["425"],"'InitialState' is defined but never used.","'setLogginError' is assigned a value but never used.","'combineReducers' is defined but never used.",["424"],["425"],"'axios' is defined but never used.","'history' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'handleSubmit' and 'onSubmit'. Either include them or remove the dependency array.",["427"],["424"],["425"],"'loginPayload' is defined but never used.","'Button' is defined but never used.","'Box' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'logged'. Either include them or remove the dependency array.",["428"],"'handleRefreshToken' is defined but never used.","React Hook useEffect has missing dependencies: 'fetchCallback' and 'fetchOptions'. Either include them or remove the dependency array. If 'fetchCallback' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["429"],"'SnackbarOrigin' is defined but never used.",["424"],["425"],"'IPost' is defined but never used.","'createSocket' is defined but never used.","'showOptions' is assigned a value but never used.","'setShowOptions' is assigned a value but never used.","'self' is assigned a value but never used.",["424"],["425"],"'user' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handleRemoveComment'. Either include it or remove the dependency array.",["430"],"'Container' is defined but never used.","'IconButton' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement",["424"],["425"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'createStyles' is defined but never used.","'makeStyles' is defined but never used.","'Theme' is defined but never used.","'EditUser' is defined but never used.","'loading' is assigned a value but never used.","'DeleteIcon' is defined but never used.","'CalendarTodayOutlinedIcon' is defined but never used.","'User' is defined but never used.","'moment' is defined but never used.","'URL' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"431","fix":"432"},{"desc":"433","fix":"434"},{"desc":"435","fix":"436"},{"desc":"437","fix":"438"},{"desc":"439","fix":"440"},"Update the dependencies array to be: [post.likesArr]",{"range":"441","text":"442"},"Update the dependencies array to be: [handleSubmit, onSubmit]",{"range":"443","text":"444"},"Update the dependencies array to be: [dispatch, logged, user]",{"range":"445","text":"446"},"Update the dependencies array to be: [fetchCallback, fetchOptions]",{"range":"447","text":"448"},"Update the dependencies array to be: [handleRemoveComment, handleUpdateComment, postId]",{"range":"449","text":"450"},[2846,2848],"[post.likesArr]",[2599,2601],"[handleSubmit, onSubmit]",[1898,1904],"[dispatch, logged, user]",[1379,1381],"[fetchCallback, fetchOptions]",[1860,1910],"[handleRemoveComment, handleUpdateComment, postId]"]